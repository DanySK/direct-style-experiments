<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on PPS-22-direct-style-experiments</title>
    <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/</link>
    <description>Recent content in Docs on PPS-22-direct-style-experiments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/01-boundaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/01-boundaries/</guid>
      <description>boundary &amp;amp; break # boundary &amp;amp; break mechanism provides a cleaner alternative to non-local returns:&#xA;boundary: is short for boundary.apply: the indented code below it is passed as body is a context function that is called within boundary.apply to break an in-scope given instance of Label is required (i.e. is impossible break without an enclosing boundary) Users don&amp;rsquo;t define Label instances themselves. Instead, this is done inside the implementation of boundary.</description>
    </item>
    <item>
      <title></title>
      <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/02-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/02-basics/</guid>
      <description>Basic asynchronous constructs # The need for a new Future construct # The current implementation of the Future monadic construct suffers the following main cons:&#xA;Lack of referential transparency; Lack of cancellation mechanisms and structured concurrency; Accidental Sequentiality. To show these weaknesses in practice, a simple example of the core of a web service implementation is presented.&#xA;Example: a blog posts service # Idea: develop a very simple (mocked) service which allows to retrieve and store from a repository blog posts, performing checks on the content and author before the actual storage.</description>
    </item>
    <item>
      <title></title>
      <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/03-channels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/03-channels/</guid>
      <description>Channels as a communication primitive # The fourth, yet not mentioned, abstraction of both Kotlin Coroutines and Scala Gears is the channel. Channels represent the primitive communication and coordination means to exchange Future results. They are, at least conceptually, very similar to a queue where it is possible to send (and receive) data &amp;ndash; basically, exploiting the producer-consumer pattern.&#xA;classDiagram class `SendableChannel[-T]` { &lt;&lt; trait &gt;&gt; +sendSource(x: T) Async.Source[Either[Closed, Unit]] +send(x: T)(using Async) Unit } class `ReadableChannel[+T]` { &lt;&lt; trait &gt;&gt; +readSource Async.</description>
    </item>
    <item>
      <title></title>
      <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/04-rears/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/04-rears/</guid>
      <description>An attempt to bring reactivity principles in gears # So far, we&amp;rsquo;ve explored the basics of asynchronous abstraction mechanisms provided by the direct style of the Scala Gears and Kotlin Coroutines frameworks.&#xA;The goal of this last example is to investigate, using a simple example, whether these two frameworks offers sufficient idiomatic abstractions to deal with reactive-like systems.&#xA;Smart Hub System example # Idea: in an IoT context a multitude of sensors of different types, each replicated to ensure accurate measurements, transmit their measurements to a central hub, which in turns needs to react, in real-time, forwarding to the appropriate controller the data, possibly running some kind of transformation, enabling controllers to make decisions based on their respective logic.</description>
    </item>
    <item>
      <title></title>
      <link>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/05-conclusions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tassiluca.github.io/PPS-22-direct-style-experiments/docs/05-conclusions/</guid>
      <description> Going further and conclusions # </description>
    </item>
  </channel>
</rss>
